@file:Suppress("UNUSED_PARAMETER", "ConvertCallChainIntoSequence")

package lesson7.task1

import ru.spbstu.wheels.toMap
import java.io.File
import kotlin.math.roundToInt


// Урок 7: работа с файлами
// Урок интегральный, поэтому его задачи имеют сильно увеличенную стоимость
// Максимальное количество баллов = 55
// Рекомендуемое количество баллов = 20
// Вместе с предыдущими уроками (пять лучших, 3-7) = 55/103

/**
 * Пример
 *
 * Во входном файле с именем inputName содержится некоторый текст.
 * Вывести его в выходной файл с именем outputName, выровняв по левому краю,
 * чтобы длина каждой строки не превосходила lineLength.
 * Слова в слишком длинных строках следует переносить на следующую строку.
 * Слишком короткие строки следует дополнять словами из следующей строки.
 * Пустые строки во входном файле обозначают конец абзаца,
 * их следует сохранить и в выходном файле
 */
fun alignFile(inputName: String, lineLength: Int, outputName: String) {
    val writer = File(outputName).bufferedWriter()
    var currentLineLength = 0
    fun append(word: String) {
        if (currentLineLength > 0) {
            if (word.length + currentLineLength >= lineLength) {
                writer.newLine()
                currentLineLength = 0
            } else {
                writer.write(" ")
                currentLineLength++
            }
        }
        writer.write(word)
        currentLineLength += word.length
    }
    for (line in File(inputName).readLines()) {
        if (line.isEmpty()) {
            writer.newLine()
            if (currentLineLength > 0) {
                writer.newLine()
                currentLineLength = 0
            }
            continue
        }
        for (word in line.split(Regex("\\s+"))) {
            append(word)
        }
    }
    writer.close()
}

/**
 * Простая (8 баллов)
 *
 * Во входном файле с именем inputName содержится некоторый текст.
 * Некоторые его строки помечены на удаление первым символом _ (подчёркивание).
 * Перенести в выходной файл с именем outputName все строки входного файла, убрав при этом помеченные на удаление.
 * Все остальные строки должны быть перенесены без изменений, включая пустые строки.
 * Подчёркивание в середине и/или в конце строк значения не имеет.
 */
fun deleteMarked(inputName: String, outputName: String) {
    val writer = File(outputName).bufferedWriter()
    writer.use { writer ->
        val file = File(inputName)
        for (i in file.readLines()) {
            if (i == "") {
                writer.newLine()
            } else if (i[0] != '_') {
                writer.write(i)
                writer.newLine()
            }
        }
    }

}

/**
 * Средняя (14 баллов)
 *
 * Во входном файле с именем inputName содержится некоторый текст.
 * На вход подаётся список строк substrings.
 * Вернуть ассоциативный массив с числом вхождений каждой из строк в текст.
 * Регистр букв игнорировать, то есть буквы е и Е считать одинаковыми.
 *
 */
fun countSubstrings(inputName: String, substrings: List<String>): Map<String, Int> {
    val map = mutableMapOf<String, Int>()
    for (j in File(inputName).readLines()) {
        for (i in substrings.toSet()) {
            if (i !in map) {
                map[i] = 0
            }
            var pattern = i.lowercase().toRegex()
            if (listOf(".").contains(i)) {
                pattern = Regex("""\$i""")
            }
            var start = 0
            while (pattern.find(j.lowercase(), startIndex = start) != null) {
                start = pattern.find(j.lowercase(), startIndex = start)!!.range.first + 1
                map[i] = map[i]!! + 1

            }

        }
    }

    return map
}
/**
 * Средняя (12 баллов)
 *
 * В русском языке, как правило, после букв Ж, Ч, Ш, Щ пишется И, А, У, а не Ы, Я, Ю.
 * Во входном файле с именем inputName содержится некоторый текст на русском языке.
 * Проверить текст во входном файле на соблюдение данного правила и вывести в выходной
 * файл outputName текст с исправленными ошибками.
 *
 * Регистр заменённых букв следует сохранять.
 *
 * Исключения (жюри, брошюра, парашют) в рамках данного задания обрабатывать не нужно
 *
 */
val map = mapOf('ю' to 'у', 'Ю' to 'У', 'Я' to 'А', 'я' to 'а', 'ы' to 'и', 'Ы' to 'И')
fun sibilants(inputName: String, outputName: String) {
    val outputFile = File(outputName).bufferedWriter()
    outputFile.use { outputFile ->
        for (i in File(inputName).readLines()) {
            var str = i
            for (i in Regex("""[шщжч](?=[юяы])""").findAll(i.lowercase())) {
                str = str.replaceRange(i.range.last + 1, i.range.last + 2, map[str[i.range.last + 1]].toString())
            }
            outputFile.write(str)
            outputFile.newLine()

        }
    }
}

/**
 * Средняя (15 баллов)
 *
 * Во входном файле с именем inputName содержится некоторый текст (в том числе, и на русском языке).
 * Вывести его в выходной файл с именем outputName, выровняв по центру
 * относительно самой длинной строки.
 *
 * Выравнивание следует производить путём добавления пробелов в начало строки.
 *
 *
 * Следующие правила должны быть выполнены:
 * 1) Пробелы в начале и в конце всех строк не следует сохранять.
 * 2) В случае невозможности выравнивания строго по центру, строка должна быть сдвинута в ЛЕВУЮ сторону
 * 3) Пустые строки не являются особым случаем, их тоже следует выравнивать
 * 4) Число строк в выходном файле должно быть равно числу строк во входном (в т. ч. пустых)
 *
 */
fun centerFile(inputName: String, outputName: String) {
    var maxLen = 0
    val outputFile = File(outputName).bufferedWriter()
    outputFile.use { outputFile ->
        for (i in File(inputName).readLines()) {
            if (i.trim().length > maxLen) maxLen = i.trim().length
        }
        for (i in File(inputName).readLines()) {
            var addN = maxLen - i.trim().length
            if (addN % 2 != 0) {
                addN -= 1
            }
            addN /= 2
            val newStr = " ".repeat(addN) + i.trim()
            outputFile.write(newStr)
            outputFile.newLine()
        }
    }
}

/**
 * Сложная (20 баллов)
 *
 * Во входном файле с именем inputName содержится некоторый текст (в том числе, и на русском языке).
 * Вывести его в выходной файл с именем outputName, выровняв по левому и правому краю относительно
 * самой длинной строки.
 * Выравнивание производить, вставляя дополнительные пробелы между словами: равномерно по всей строке
 *
 * Слова внутри строки отделяются друг от друга одним или более пробелом.
 *
 * Следующие правила должны быть выполнены:
 * 1) Каждая строка входного и выходного файла не должна начинаться или заканчиваться пробелом.
 * 2) Пустые строки или строки из пробелов трансформируются в пустые строки без пробелов.
 * 3) Строки из одного слова выводятся без пробелов.
 * 4) Число строк в выходном файле должно быть равно числу строк во входном (в т. ч. пустых).
 *
 * Равномерность определяется следующими формальными правилами:
 * 5) Число пробелов между каждыми двумя парами соседних слов не должно отличаться более, чем на 1.
 * 6) Число пробелов между более левой парой соседних слов должно быть больше или равно числу пробелов
 *    между более правой парой соседних слов.
 *
 * Следует учесть, что входной файл может содержать последовательности из нескольких пробелов  между слвоами. Такие
 * последовательности следует учитывать при выравнивании и при необходимости избавляться от лишних пробелов.
 * Из этого следуют следующие правила:
 * 7) В самой длинной строке каждая пара соседних слов должна быть отделена В ТОЧНОСТИ одним пробелом
 * 8) Если входной файл удовлетворяет требованиям 1-7, то он должен быть в точности идентичен выходному файлу
 */
fun alignFileByWidth(inputName: String, outputName: String) {
    var maxLen = 0
    val outputFile = File(outputName).bufferedWriter()
    for (i in File(inputName).readLines()) {
        val nowLen = Regex("""(\s){2,}""").replace(i.trim(), " ").length
        if (nowLen > maxLen) maxLen = nowLen
    }
    var isFirstLine = true
    outputFile.use { outputFile ->
        for (i in File(inputName).readLines()) {
            val nowLen = Regex("""\s""").replace(i.trim(), "").length
            if (nowLen != 0) {
                val nowWords = Regex("""(\s){2,}""").replace(i.trim(), " ").split(" ").size
                if (nowWords != 1) {
                    val d = (maxLen - nowLen).toDouble() / (nowWords - 1).toDouble()
//                    println("$d, ${i.trim()}, $nowLen")
                    var predominantNumber = (nowWords - 1) / 2
                    var more = d.roundToInt()
                    var less = 0
                    less = if (d % 1.0 >= 0.5) more - 1
                    else more + 1
                    while (predominantNumber * more + (nowWords - 1 - predominantNumber) * less != maxLen - nowLen) {
                        predominantNumber++
                    }
//                    println("$predominantNumber - $more, ${(nowWords - 1 - predominantNumber)} - $less")
                    var resStr = ""
                    val allWords = Regex("""(\s){2,}""").replace(i.trim(), " ").split(" ")
                    if (less > more) {
                        val less2 = less
                        less = more
                        more = less2
                        predominantNumber = nowWords - 1 - predominantNumber
                    }
                    for (j in allWords.indices) {
                        resStr += if (j < predominantNumber) {
                            allWords[j] + " ".repeat(more)
                        } else {
                            if (j != allWords.size - 1) allWords[j] + " ".repeat(less) else allWords[j]
                        }
                    }
                    if (!isFirstLine) outputFile.newLine()
                    outputFile.write(resStr)

                } else {
                    if (!isFirstLine) outputFile.newLine()

                    outputFile.write(i.trim())
                }

            } else {
                if (!isFirstLine) outputFile.newLine()
                outputFile.write("")
            }
            if (isFirstLine) isFirstLine = false
        }

    }
}

/**
 * Средняя (14 баллов)
 *
 * Во входном файле с именем inputName содержится некоторый текст (в том числе, и на русском языке).
 *
 * Вернуть ассоциативный массив, содержащий 20 наиболее часто встречающихся слов с их количеством.
 * Если в тексте менее 20 различных слов, вернуть все слова.
 * Вернуть ассоциативный массив с числом слов больше 20, если 20-е, 21-е, ..., последнее слова
 * имеют одинаковое количество вхождений (см. также тест файла input/onegin.txt).
 *
 * Словом считается непрерывная последовательность из букв (кириллических,
 * либо латинских, без знаков препинания и цифр).
 * Цифры, пробелы, знаки препинания считаются разделителями слов:
 * Привет, привет42, привет!!! -привет?!
 * ^ В этой строчке слово привет встречается 4 раза.
 *
 * Регистр букв игнорировать, то есть буквы е и Е считать одинаковыми.
 * Ключи в ассоциативном массиве должны быть в нижнем регистре.
 *
 */
fun top20Words(inputName: String): Map<String, Int> {
    val map = mutableMapOf<String, Int>()
    for (i in File(inputName).readLines()) {
        println(i)
        for (j in Regex("""[А-яA-zёЁ]+""").findAll(i.lowercase())) {
            if (j.value != "") {
                val element = map[j.value.lowercase()]
                if (element != null) {
                    map[j.value.lowercase()] = element + 1
                } else {
                    map[j.value.lowercase()] = 1
                }
            }
        }
    }
    val resMap = if (map.size > 20) {
        val twenty = map.entries.toList()[19].value
        map.filter { it.value >= twenty }
    } else map
    return resMap.entries.sortedByDescending { it.value }.toMap()
}

/**
 * ??????? (14 ??????)
 *
 * ??????????? ?????????????? ?????? ?? ???????? ????? ? ???????? ???? ??????????? ??????????? ?????????? ??????.

 * ?? ??????? ????? ? ?????? inputName ?????????? ????????? ????? (? ??? ?????, ? ?? ??????? ?????).
 *
 * ? ????????????? ??????? dictionary ?????????? ???????, ? ??????? ????????? ????????
 * ???????? ? ???????????? ??????? ?? ????????, ????????
 * mapOf('?' to "zz", '?' to "r", '?' to "d", '?' to "y", '?' to "m", '?' to "yy", '!' to "!!!")
 *
 * ?????????? ??????? ? ???????? ???? ? ?????? outputName
 * ?????????? ?????? ? ??????? ???? ???????? ?? ??????? ?? ??????????????? ?? ??????.
 *
 * ??? ???? ??????? ???????? ? ??????? ?????? ??????????????,
 * ?? ??? ?????? ?????? ? ??????? ???????? ???????????? ? ??????, ???????????? ? ??????? ? ??????? ????????.
 *
 * ??????.
 * ??????? ?????: ??????????, ???!
 *
 * ?????????? ??
 *
 * ???????? ?????: Zzdr??????y, m??!!!
 *
 * ?????? 2.
 *
 * ??????? ?????: ??????????, ???!
 * ???????: mapOf('?' to "zZ", '?' to "r", '?' to "d", '?' to "y", '?' to "m", '?' to "YY", '!' to "!!!")
 *
 * ?????????? ??
 *
 * ???????? ?????: Zzdr??????y, m??!!!
 *
 * ???????? ????????: ?????? ???????
 * ?? ????? ????????????? ????????
 */
fun transliterate(inputName: String, dictionary: Map<Char, String>, outputName: String) {
    TODO()
}

/**
 * ??????? (12 ??????)
 *
 * ?? ??????? ????? ? ?????? inputName ??????? ??????? ? ????? ?????? ? ?????? ???????.
 * ??????? ?? ??????? ??????? ???????? ??????? ?????,
 * ? ??????? ??? ????? ??????, ????????: ????????????, ??????????????.
 * ??????? ??? ? ???????? ???? ? ?????? outputName.
 * ???? ?? ??????? ????? ??????? ????????? ???? ? ?????????? ??????, ? ??????? ??? ????? ??????,
 * ? ???????? ???? ??????? ??????? ?? ??? ????? ???????.
 * ??????? ???? ????????????, ?? ???? ????? ? ? ? ??????? ???????????.
 *
 * ?????? ???????? ?????:
 * ??????????
 * ?????????
 * ??????????
 * ??????????
 * ??????????
 * ??????????

 * ??????????????? ???????? ????:
 * ??????????, ??????????
 *
 * ???????? ????????: ?????? ??????? ?? ????? ????????????? ????????
 */
fun chooseLongestChaoticWord(inputName: String, outputName: String) {
    TODO()
}

/**
 * ??????? (22 ?????)
 *
 * ??????????? ?????????????? ?????? ? ???????? ??????? ???????? ? ?????? ???????? HTML.
 *
 * ?? ??????? ????? ? ?????? inputName ?????????? ?????, ?????????? ? ???? ???????? ????????? ???????? ????????? ?????:
 * - *????? ? ????????? ??????????* -- ??????
 * - **????? ? ?????????? ??????????** -- ??????????
 * - ~~??????????? ?????~~ -- ????????????
 *
 * ??????? ??????? ? ???????? ???? ???? ?? ????? ? ??????? HTML:
 * - <i>????? ? ????????? ??????????</i>
 * - <b>????? ? ?????????? ??????????</b>
 * - <s>??????????? ?????</s>
 *
 * ????? ????, ??? ?????? ????????? ??????, ????????? ???? ?? ????? ??????? ????????, ??????? ???????? ? ???? <p>...</p>,
 * ? ???? ????? ??????? ? ???? <html><body>...</body></html>.
 *
 * ??? ????????? ????? ????????? ?????? ?????? ???????? ??????????? ? ????????? ?? ??????? ???????? ? ????????? ?????.
 * ???????? ??????? ????????, ??? ??????????? ?????????????????? ?? ??? ???????? (***) ?????? ???????????? ??? "<b><i>"
 * ? ????? ?????.
 *
 * ??? ??????? ???? ? ???? ????????? ????? ??????? ????????? ?????? ????????? "????".
 *
 * ?????? ???????? ?????:
Lorem ipsum *dolor sit amet*, consectetur **adipiscing** elit.
Vestibulum lobortis, ~~Est vehicula rutrum *suscipit*~~, ipsum ~~lib~~ero *placerat **tortor***,

Suspendisse ~~et elit in enim tempus iaculis~~.
 *
 * ??????????????? ???????? ????:
<html>
<body>
<p>
Lorem ipsum <i>dolor sit amet</i>, consectetur <b>adipiscing</b> elit.
Vestibulum lobortis. <s>Est vehicula rutrum <i>suscipit</i></s>, ipsum <s>lib</s>ero <i>placerat <b>tortor</b></i>.
</p>
<p>
Suspendisse <s>et elit in enim tempus iaculis</s>.
</p>
</body>
</html>
 *
 * (??????? ? ???????? ????? ? ??????? ????????? ??? ???????????, ??? ??????? ?????? ?? ????????????? ?? ???????????)
 */
fun markdownToHtmlSimple(inputName: String, outputName: String) {
    TODO()
}

/**
 * ??????? (23 ?????)
 *
 * ??????????? ?????????????? ?????? ? ???????? ??????? ???????? ? ?????? ???????? HTML.
 *
 * ?? ??????? ????? ? ?????? inputName ?????????? ?????, ?????????? ? ???? ????? ????????? ???? ? ????? ???????.
 * ?????? ?????? ???? ?????: ???????????? ? ??????????????.
 *
 * ?????? ??????? ??????????????? ?????? ?????????? ? ????? ?????? ? ??????? '*', ?????? ??????? ????????????? ?????? --
 * ? ????? ??????, ????? ? ?????. ?????? ??????? ?????????? ?????? ?????????? ? ??????? ?? ????????, ?? 4 ??????? ????????,
 * ??? ??????-????????. ??????????? ??????? ??????????? ??????? ????? ????????? 6. "???????" ?????? ????? ?????????
 * ????? ? ?????? ??????.
 *
 * ??????? ??????? ???? ?? ????? ? ???????? ???? ? ??????? HTML:
 * ???????????? ??????:
 * <ol>
 *     <li>???</li>
 *     <li>???</li>
 *     <li>???</li>
 * </ol>
 *
 * ?????????????? ??????:
 * <ul>
 *     <li>???</li>
 *     <li>???</li>
 *     <li>???</li>
 * </ul>
 *
 * ????? ????, ???? ????? ??????? ??????? ???????? ? ???? <html><body><p>...</p></body></html>
 *
 * ??? ????????? ????? ????????? ?????? ?????? ???????? ??????????? ? ????????? ?? ??????? ???????? ? ????????? ?????.
 *
 * ?????? ???????? ?????:
///////////////////////////////?????? ?????/////////////////////////////////////////////////////////////////////////////
 * ???? ??-????????
 * ????
 * ????
 * ????? ??????
1. ????
 * ??? ???????
2. ???????
3. ?????????
4. ???-?? ??? ???
 * ????????
 * ??????
1. ??????
23. ??????
1. ???????
2. ??????
///////////////////////////////????? ?????//////////////////////////////////////////////////////////////////////////////
 *
 *
 * ??????????????? ???????? ????:
///////////////////////////////?????? ?????/////////////////////////////////////////////////////////////////////////////
<html>
<body>
<p>
<ul>
<li>
???? ??-????????
<ul>
<li>????</li>
<li>????</li>
</ul>
</li>
<li>
????? ??????
<ol>
<li>????
<ul>
<li>??? ???????</li>
</ul>
</li>
<li>???????</li>
<li>?????????</li>
<li>???-?? ??? ???</li>
</ol>
</li>
<li>????????</li>
<li>??????
<ol>
<li>??????</li>
<li>??????
<ol>
<li>???????</li>
<li>??????</li>
</ol>
</li>
</ol>
</li>
</ul>
</p>
</body>
</html>
///////////////////////////////????? ?????//////////////////////////////////////////////////////////////////////////////
 * (??????? ? ???????? ????? ? ??????? ????????? ??? ???????????, ??? ??????? ?????? ?? ????????????? ?? ???????????)
 */
fun markdownToHtmlLists(inputName: String, outputName: String) {
    TODO()
}

/**
 * ????? ??????? (30 ??????)
 *
 * ??????????? ?????????????? ?? ???? ?????????? ????? ???????????? ??? ????? ? ??? ?? ??????.
 * ??????? ???????, ???:
 * - ??????, ????????? ???? ?? ????? ?????? ???????, ???????? ??????? ? ?????? ????????? ? ?????? ?????????? ????????? ?????.
 *
 */
fun markdownToHtml(inputName: String, outputName: String) {
    TODO()
}

/**
 * ??????? (12 ??????)
 *
 * ??????? ? ???????? ???? ??????? ????????? ????????? ????? lhv (> 0) ?? ????? rhv (> 0).
 *
 * ?????? (??? lhv == 19935, rhv == 111):
19935
 *    111
--------
19935
+ 19935
+19935
--------
2212785
 * ???????????? ???????, ??????? ? ?????? ?????? ? ???????? ??????????????? ???????.
 * ???? ? ????????? ???????????? ??? ??, ??? ? ????????? ?????:
235
 *  10
-----
0
+235
-----
2350
 *
 */
fun printMultiplicationProcess(lhv: Int, rhv: Int, outputName: String) {
    TODO()
}


/**
 * ??????? (25 ??????)
 *
 * ??????? ? ???????? ???? ??????? ??????? ????????? ????? lhv (> 0) ?? ????? rhv (> 0).
 *
 * ?????? (??? lhv == 19935, rhv == 22):
19935 | 22
-198     906
----
13
-0
--
135
-132
----
3

 * ???????????? ???????, ??????? ? ?????? ?????? ? ???????? ??????????????? ???????.
 *
 */
fun printDivisionProcess(lhv: Int, rhv: Int, outputName: String) {
    TODO()
}

